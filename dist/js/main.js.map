{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["let mainSliderJQ = $('.main-slider');\nlet mainSlider = document.querySelector('.main-slider');\n\nmainSliderJQ.slick({\n    dots: true,\n    arrows: true,\n    infinite: true,\n    slidesToShow: 1,\n    fade: true,\n    cssEase: 'linear'\n});\n\nlet logo = document.querySelector('.logo');\nlet mainSliderSlick = mainSliderJQ.slick('getSlick');\nlet mainFirstSlide = mainSliderSlick?.$slides[0];\n\nlet mainArrows = document.querySelectorAll('.slick-arrow');\nlet mainDots = mainSlider.querySelector('.slick-dots');\nlet mainText = mainSlider.querySelector('.slick-active')\n    ?.querySelector('.texts-block');\n\nlet mobile = {\n    default: {\n        dots: '148px',\n        arrows: '54px',\n    },\n};\n\nlet desktop = {\n    default: {\n        dots: '250px',\n        arrows: '54px',\n    },\n};\n\nlet getOffsetLeft = selector => {\n    if (!selector)\n        return selector\n    if (selector.offsetLeft)\n        return selector.offsetLeft;\n    else if (selector && !selector.offsetLeft)\n        return getOffsetLeft(selector?.offsetParent);\n};\n\nlet getOffsetTop = selector => {\n    if (!selector)\n        return selector\n    if (selector.offsetTop)\n        return selector.offsetTop;\n    else if (selector && !selector.offsetTop)\n        return getOffsetTop(selector?.offsetParent);\n};\n\nlet calculateProperty = (currentProperty, newProperty) => {\n    if (typeof newProperty == 'string') {\n        currentValue = parseFloat(currentProperty);\n        newValue = parseFloat(newProperty.slice(2, -2));\n\n        if (['auto', 'none', 'inherit'].includes(newProperty) || /%$/g.test(newProperty)) {\n            return newProperty;\n        } else if (currentValue && newProperty.startsWith('+=')) {\n            return `${currentValue - newValue}px`;\n        } else if (currentValue && newProperty.startsWith('-=')) {\n            return `${currentValue - newValue}px`;\n        }\n\n        let result = parseFloat(newProperty) || 0;\n        return `${result}px`;\n    }\n};\n\nlet setCSS = (element, properties) => {\n    for (let property in properties) {\n        currentStyleValue = getComputedStyle(element)[property];\n        element.style[property] = `${calculateProperty(currentStyleValue, properties[property])}`;\n    }\n};\n\nfunction protoCSS(properties) {\n    Array.from(this).forEach(el => setCSS(el, properties));\n}\n\nfunction customCSS(properties) {\n    setCSS(this, properties);\n}\n\nNodeList.prototype.css = protoCSS;\nHTMLUListElement.prototype.css = customCSS;\n\nlet animations = document.querySelectorAll('.sanimate');\nanimations.forEach(el => {\n    let {\n        delay,\n        duration,\n        timing\n    } = el.dataset;\n\n    if (delay)\n        el.style.animationDelay = delay;\n\n    if (duration)\n        el.style.animationDuration = duration;\n\n    if (timing)\n        el.style.animationTimingFunction = timing;\n});\n\nsetTimeout(() => {\n    mainFirstSlide.querySelector('.hide')?.classList.remove('hide');\n    mainArrows.forEach(arrow => arrow.classList.add('sanimate', 'fadeInUp'));\n    mainDots.classList.add('sanimate', 'fadeInUp');\n    mainFirstSlide.querySelectorAll('.sanimate').forEach(\n        el => el.classList.add('fadeInUp')\n    );\n}, 400);\n\nfunction animateMainSlider(slick, remove = false) {\n    let animateName = 'fadeInUp';\n    let currentSlideIdx = slick.currentSlide;\n    let currentSlide = slick.$slides[currentSlideIdx];\n    let currentSelectors = currentSlide.querySelectorAll('.sanimate');\n    currentSelectors.forEach(el => !remove ? el.classList.add(animateName) : el.classList.remove(animateName));\n}\n\nmainSliderJQ.on('beforeChange', (event, slick, next) => animateMainSlider(slick, true));\nmainSliderJQ.on('swipe', (event, slick, direction) => animateMainSlider(slick));\nmainDots.querySelectorAll('li').forEach(dot => {\n    dot.addEventListener('click', () => animateMainSlider(mainSliderSlick));\n});\nmainArrows.forEach(\n    arrow => arrow.addEventListener('click', () => animateMainSlider(mainSliderSlick))\n);\n\n$('.clients-slider').slick({\n    dots: true,\n    infinite: false,\n    speed: 300,\n    slidesToShow: 2,\n    slidesToScroll: 2,\n    mobileFirst: true,\n\n    responsive: [{\n            breakpoint: 560,\n            settings: {\n                slidesToShow: 3,\n                slidesToScroll: 2,\n                dots: true,\n            }\n        },\n        {\n            breakpoint: 760,\n            settings: {\n                slidesToShow: 4,\n                slidesToScroll: 2,\n                dots: true,\n            }\n        },\n        {\n            breakpoint: 1280,\n            settings: \"unslick\"\n        }\n    ]\n});\n\n$('.news-slider').slick({\n    dots: true,\n    infinite: true,\n    speed: 300,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    mobileFirst: true,\n    adaptiveHeight: true,\n    arrows: true,\n    responsive: [{\n        breakpoint: 760,\n        settings: {\n            slidesToShow: 2,\n            slidesToScroll: 1,\n            dots: true,\n            centerMode: true,\n        }\n    }, ]\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    document.querySelectorAll('.back-image').forEach(block => {\n        let {\n            bg: bgImage,\n            bgMob: mobImage\n        } = block.dataset;\n        let url = `url(${window.innerWidth <= 760 ? mobImage : bgImage})`;\n        block.style.backgroundImage = url;\n    });\n\n    let blocks = document.querySelectorAll('.scroll.sanimate');\n    let clientsSlides = document.querySelectorAll('.clients-slider > .slide.sanimate');\n\n    clientsSlides.forEach((slide, index) => {\n        slide.style.animationDelay = `${index * 170}ms`;\n    });\n\n    let observerCallback = (entries, observer) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('fadeInUp');\n                observer.unobserve(entry.target);\n            }\n        });\n    };\n\n    blocks.forEach(block => {\n        new IntersectionObserver(observerCallback, {\n            threshold: 0.2\n        }).observe(block);\n    });\n\n    clientsSlides.forEach(block => {\n        new IntersectionObserver(observerCallback, {\n            threshold: 0.4\n        }).observe(block);\n    });\n});"],"file":"main.js"}